/* use  **************************************************************************************************/

use anyhow::Result;
use chrono::{serde as chrono_serde, NaiveDateTime};
use env_logger::init as init_logger;
use log::info;

/* mod  **************************************************************************************************/

/* type alias  *******************************************************************************************/

/* global const  *****************************************************************************************/

/* trait  ************************************************************************************************/

/* enum  *************************************************************************************************/

/* struct  ***********************************************************************************************/

/* unsafe impl standard traits  **************************************************************************/

/* impl standard traits  *********************************************************************************/

/* impl custom traits  ***********************************************************************************/

/* impl  *************************************************************************************************/

/* fn  ***************************************************************************************************/

// x: "11/25/24, 11:28:34 AM GMT+9";
fn conv_time(x: &str) -> Result<NaiveDateTime> {
  let dt = chrono::NaiveDateTime::parse_from_str(x, "%m/%d/%y, %I:%M:%S %p GMT%z")?;
  Ok(dt)
}

fn main() -> Result<()> {
  init_logger();
  info!("Application started.");
  Ok(())
}

/* async fn  *********************************************************************************************/

/* test for pri ******************************************************************************************/

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn test_conv_time() {
    let x = "11/25/24, 11:28:34 AM GMT+9";
    let dt = conv_time(x).unwrap();
    assert_eq!(
      dt,
      NaiveDateTime::parse_from_str("11/25/24, 11:28:34 AM GMT+9", "%m/%d/%y, %I:%M:%S %p GMT%z")
        .unwrap()
    );
  }
}

/* test for pub ******************************************************************************************/
